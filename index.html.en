<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>trans - Image Explode test</title>

    <link rel="stylesheet/less" type="text/css" href="main.less" />
    <script src="//cdnjs.cloudflare.com/ajax/libs/less.js/2.5.1/less.min.js"></script>

    <!-- Bootstrap Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">

    <!-- Optional theme -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css" integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp" crossorigin="anonymous">

    </head>

  </head>
  <body>

    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>

    <!-- Latest compiled and minified JavaScript -->
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
  </body>
</html>



<div class="init-status">
  *1-uponLoad*
</div>

<div class="cycle-status"  cycles="0">
</div>

<div class="profile_photos">
  <img src="./gina_5580042-profile-pictures.jpg"
       height="140px;" width="140px;" >
  <img src="./ray_IMG_2700.jpg"
       height="140px;" width="140px;" >
  <img src="./stefan_Swanepoel_Profile_01-1024x683.png"
       height="140px;" width="140px;" >
</div>

<div class="explode">
  <!-- img src="http://lorempixel.com/500/500" -->
  <!-- img src="./may_2017_ray_IMG_2700.jpg" -->
  <!-- img src="./may_2017_ray_halftone-image-generator.png" -->
  <!-- img src="./5580042-profile-pictures.jpg" -->
  <!-- img src="./5580042-profile-pictures.svg" -->
  <img src="./gina_5580042-profile-pictures_halftone-image-generator.png" />
  <!-- img src="./halftone-image-generator.png" -->
</div>


<script>

function statusLog( msg, plugIn) {
  if ( $( ".init-done" ).length == 0) {
    $( ".init-status" ).append( msg );
  } else {
    if (msg.indexOf("*11-requestAnimationFrame") != -1) {
      var img_src = $('.explode').find('img:first-child').attr('src');
      var name = img_src.slice( img_src.indexOf('/') + 1, img_src.indexOf('_') );
      var cycles = parseInt($( ".cycle-status" ).attr('cycles'));
      if(plugIn.options.direction == 'out') {
        if ( cycles == 2) {
          $( ".cycle-status" ).html( "");
          cycles = 0;
        }
      } else {
        cycles += 1;
      }
      $( ".cycle-status" ).append( "<br />" + "**" + name + "**...");
      $( ".cycle-status" ).attr('cycles', cycles + '');
    }
    $( ".cycle-status" ).append( msg );
  }
};


$(function() {
  // Bind events and initialize plugin
  statusLog( "  ..*2-domReady*" );
  $('.explode')
    .on('pixellate-exploded', function() {
      var self = this;
      setTimeout(function() {
        $(self).pixellate('in');
      }, 500);
    })
    .on('pixellate-imploded', function() {
      var self = this;
      setTimeout(function() {
       $(self).pixellate('out');
      }, 2000);
    })
    .pixellate();
  statusLog( "  ..*3-after domReadyPixellate()*" );
  $( ".init-status" ).addClass('init-done');
});


var pluginName = 'pixellate',
    defaults = {
      // Grid divisions
      columns: 20,
      rows: 20,

      // Duration of explosion animation
      duration: 1500,

      // Direction of explosion animation ('out', 'in', or 'none')
      direction: 'out',

      // Resize pixels during animation
      scale: true,

      // Coordinates representing the source of the explosion force
      //(e.g. [-1, 1] makes the explodey bits go up and to the right)
      explosionOrigin: [0,0]
    };
statusLog( "  ..*4-global data done*" );

function Plugin(el, options) {
  statusLog( "  ..*5-created Plugin: direction = '" + defaults.direction + "'*");
  this.$el = $(el);
  this.options = $.extend({}, defaults, options);
  this._defaults = defaults;
  this._name = pluginName;

  this.init();
  statusLog( "  ..*6-Plugin init done.*" );
};

Plugin.prototype = {
  init: function() {
    statusLog( "  ..*7-Plugin init: *");
    // this.$el = PlugIn instance's '.explode' container div.
    // this.$el.pixellate-pixel is an array of spans for each image fragment.
    if(!this.$el.find('.pixellate-pixel').length) {
      var $img = this.$el.find('img:first-child'),
          img = new Image();

      this.$el
        .data('pixellate-image', $img.attr('src'))
        .addClass('pixellate-lock');
      $img.css('visibility', 'hidden');

      $(img).one('load', $.proxy(this.createPixels, this));

      img.src = this.$el.data('pixellate-image');
      if(img.complete) $(img).trigger('load');
    } else {
      this.stylePixels();
    }
  },

  createPixels: function() {
    this.$el.append(new Array((this.options.rows * this.options.columns) + 1).join('<span class="pixellate-pixel"></span>'));
    statusLog( "  ..*9-createPixels: pixellate-pixel[ ].length = '" + this.$el.find('.pixellate-pixel').length + "'*");

    this.stylePixels(true);
    },

  stylePixels: function(initializeStyles) {
    statusLog( "  ..*10-stylePixels(entry)*" );
    var self = this,
        w = this.$el.width(),
        h = this.$el.height(),
        columns = this.options.columns,
        rows = this.options.rows,
        $pixels = this.$el.find('.pixellate-pixel');

    // $('.explode').find('.pixellate-pixel')[0] (length of array = 400)
    // <span class="pixellate-pixel"
    //    style="
    //       position: absolute;
    //       width: 20px; height: 20px;
    //       background-image: url(&quot;./5580042-profile-pictures_halftone-image-generator.png&quot;);
    //       background-size: 400px auto;
    //       backface-visibility: hidden;
    //       left: 0px; top: 0px;
    //       background-position: 0px 0px;
    //       transform: none;
    //       opacity: 1;
    //       transition: all 1500ms ease-in-out 0s;">

    var styles = initializeStyles ? {
      'position': 'absolute',
      'width': (w / columns),
      'height': (h / rows),
      'background-image': 'url('+this.$el.data('pixellate-image')+')',
      'background-size': w,
      'backface-visibility': 'hidden'
    } : {};

    for(var idx = 0; idx < $pixels.length; idx++) {
      var pixelStyles = {};

      if(initializeStyles) {
        var x = (idx % columns) * styles.width,
            y = (Math.floor(idx / rows)) * styles.height;

        $.extend(pixelStyles, styles, {
          'left': x,
          'top': y,
          'background-position': (-x)+'px '+(-y)+'px'
        });
      }

      if(self.options.direction == 'out') {
        var randX = (Math.random() * 300) - 150 - (self.options.explosionOrigin[0] * 150),
            randY = (Math.random() * 300) - 150 - (self.options.explosionOrigin[1] * 150);

        var transformString = 'translate('+randX+'px, '+randY+'px)';
        if(self.options.scale) {
          transformString += ' scale('+(Math.random() * 1.5 + 0.5)+')';
        }

        $.extend(pixelStyles, {
          'transform': transformString,
          'opacity': 0,
          'transition': self.options.duration+'ms ease-out'
        });
      } else if(self.options.direction == 'in') {
        $.extend(pixelStyles, {
          'transform': 'none',
          'opacity': 1,
          'transition': self.options.duration+'ms ease-in-out'
        });
      }

      $pixels.eq(idx).css(pixelStyles);
    }

    // Use rAF to ensure styles are set before class is modified
    requestAnimationFrame(function() {
      statusLog( "  ..*11-requestAnimationFrame: direction = '" + self.options.direction + "'*", self);
      if(self.options.direction == 'out') {
        self.$el.removeClass('pixellate-lock');
      } else if(self.options.direction == 'in') {
        self.$el.one('pixellate-imploded', function() {
          self.$el.addClass('pixellate-lock');
        });
      }
    });

    // Fire plugin events after animation completes
    // TODO: Use transition events when supported
    setTimeout(function() {
      if(self.options.direction == 'out')
        self.$el.trigger('pixellate-exploded');
      else if(self.options.direction == 'in')
        self.$el.trigger('pixellate-imploded');
    }, this.options.duration);
  }
};

$.fn[ pluginName ] = function ( options ) {
  return this.each(function() {
    if ( !$.data( this, "plugin_" + pluginName ) ) {
      $.data( this, "plugin_" + pluginName, new Plugin( this, options ) );
    } else if(typeof options === 'string') {
      $.data( this, "plugin_" + pluginName ).options.direction = options;
      $.data( this, "plugin_" + pluginName ).init();
    }
  });
};


// requestAnimationFrame polyfill by Erik MÃ¶ller. fixes from Paul Irish and Tino Zijdel
// MIT license
var lastTime = 0;
var vendors = ['ms', 'moz', 'webkit', 'o'];
for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
  window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
  window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
}

if (!window.requestAnimationFrame)
  window.requestAnimationFrame = function(callback, element) {
      var currTime = new Date().getTime();
      var timeToCall = Math.max(0, 16 - (currTime - lastTime));
      var id = window.setTimeout(function() { callback(currTime + timeToCall); },
        timeToCall);
      lastTime = currTime + timeToCall;
      return id;
  };

if (!window.cancelAnimationFrame)
  window.cancelAnimationFrame = function(id) {
      clearTimeout(id);
  };
statusLog( "  ..*12: Add window.request/cancelAnimationFrame()*" );

</script>
